#!/usr/local/gauche/bin/speedygosh --timeout=3600
;#!/usr/local/gauche/bin/gosh

(define-module c-a-g.cgi
  (use www.cgi)
  (use rfc.http)
  (use text.html-lite)
  (use text.tree)
  (use srfi-1)
  (use srfi-13)
  (use rfc.uri)
  (use rfc.http)
  (use rfc.cookie)
  (use util.list)
  (use file.util)
  (use gauche.charconv)
  (debug-print-width #f)
  (export
    ))
(select-module c-a-g.cgi)

(define *cmd-proc-table*
  (make-hash-table 'equal?))
(define *cmd-desc-table* '())
(define-macro (define-cmd defines desc . bodies)
  (let ((cmd (car defines))
        (args (cdr defines)))
    `(begin
       (hash-table-put! *cmd-proc-table* ,(x->string cmd) (lambda ,args
                                                            ,@bodies))
       (set! *cmd-desc-table* (cons (cons ,(x->string cmd) ,desc)
                                    *cmd-desc-table*))
       )))

(define (main args)
  (set! (port-buffering (current-error-port)) :line)
  (cgi-main
    (lambda (params)
      (emit-content params))
    :on-error (lambda (e)
                (list
                  (cgi-header)
                  (html:pre
                    (html-escape-string
                      (call-with-output-string
                        (cut with-error-to-port <> (cut report-error e))))))))
  0)


(define (emit-content params)
  (let1 c (make-keyword (cgi-get-parameter "c" params :default ""))
    (case c
      ((:s) (emit-content-solve params))
      ((:h) (emit-content-help params))
      (else (emit-content-form params)))))


(define (emit-content-help params)
  (list
    (cgi-header :content-type "text/html; charset=utf-8"
                :pragma "no-cache"
                :cache-control "no-cache"
                )
    (html:html
      (html:head
        (html:title "C-A-G")
        )
      (html:body
        (html:div (html:a :href (self-url) "戻る"))
        (html:hr)
        (html:p
          "詳細については、"
          (html:a
            :href "https://github.com/ayamada/c-a-g"
            "リポジトリ")
          "を見て下さい。")
        (html:hr)
        (html:div "個別コマンド一覧")
        (html:dl
          (map
            (lambda (cmd+desc)
              (list
                (html:dt
                  (html:tt
                    (html-escape-string (car cmd+desc)) " (クエリ)"))
                (html:dd
                  (html-escape-string (cdr cmd+desc))
                  " にクエリ送信")))
            *cmd-desc-table*))))))


(define (emit-content-form params)
  (let ((query (cgi-get-parameter "q" params :default "")))
    (list
      (cgi-header :content-type "text/html; charset=utf-8"
                  :pragma "no-cache"
                  :cache-control "no-cache"
                  )
      (html:html
        (html:head
          (html:title "C-A-G")
          ;(html:script :src "/chaton/prototype.js" :type "text/javascript")
          )
        (html:body :id "the-body"
                   (the-form query)
                   )))))

(define (javascript . scripts)
  (html:script
    :type "text/javascript"
    (intersperse
      "\n"
      `("<!--"
        ,@scripts
        "// -->"))))

(define (the-form query)
  (html:form
    :action (self-url)
    :method "post"
    :target "_self"
    :name "send"
    (html:div
      (html:input :type "hidden" :name "c" :value "s")
      (html:textarea :name "q" :id "post-q"
                     :rows "3" :cols "40"
                     :onkeydown "if (event.keyCode == 13) { self.document.send.submit(); return false; }"
                     (html-escape-string query))
      (html:input :type "submit" ;:name "submit"
                  :id "post-submit" :value "解決")
      )
    (javascript "self.document.send.q.focus();")
    (html:div
      (html:a
        :href (append-params-to-url (self-url) '(("c" "h")))
        "説明"))))


(define (substring-byte src start end)
  (let1 result (make-byte-string (- end start))
    (for-each
      (lambda (idx)
        (string-byte-set!
          result
          (- idx start)
          (string-byte-ref src idx)))
      (iota (- end start) start))
    result))

(define (queries->lines:mutt queries)
  (let1 r (cons
            (car queries)
            (map
              (lambda (line)
                (and-let* ((m (#/^\+/ line)))
                  (m 'after)))
              (cdr queries)))
    (if (find-tail not r)
      #f ; 一個でも偽値があれば#fを返す
      r)))
(define (queries->lines:vimirc-single queries)
  (let1 r (map
            (lambda (line)
              (and-let* (
                         ;; マルチバイト文字のコンソール上の長さを正しく
                         ;; 判断する為に、一旦Shift_JISに変換する
                         (line-sjis (ces-convert line
                                                 (gauche-character-encoding)
                                                 'sjis))
                         ;; 末尾の | を検査する
                         (_ (< 67 (string-size line-sjis)))
                         (_ (= (char->integer #\|)
                               (string-byte-ref line-sjis 67)))
                         ;; 末尾の | 以降を切り落とす
                         (line2-sjis (substring-byte line-sjis 0 67))
                         ;; 先頭の | を検査する
                         (_ (= (char->integer #\|)
                               (string-byte-ref line2-sjis 20)))
                         ;; ログはじまりの空白を検査する
                         (_ (= (char->integer #\space)
                               (string-byte-ref line2-sjis 26)))
                         ;; ログはじまりの空白までを切り落とす
                         (line3-sjis (substring-byte line2-sjis 27 67))
                         )
                ;; Shift_JISから元に戻す
                (ces-convert line3-sjis 'sjis (gauche-character-encoding))))
            queries)
    (if (find-tail not r)
      #f ; 一個でも偽値があれば#fを返す
      r)))
(define (queries->lines:vimirc-multi queries)
  (let1 r (map
            (lambda (line)
              (and-let* (
                         ;; マルチバイト文字のコンソール上の長さを正しく
                         ;; 判断する為に、一旦Shift_JISに変換する
                         (line-sjis (ces-convert line
                                                 (gauche-character-encoding)
                                                 'sjis))
                         ;; 末尾の | を検査する
                         (_ (< 67 (string-size line-sjis)))
                         (_ (= (char->integer #\|)
                               (string-byte-ref line-sjis 67)))
                         ;; 末尾の | 以降を切り落とす
                         (line2-sjis (substring-byte line-sjis 0 67))
                         ;; 先頭の | を検査する
                         ;(_ (= (char->integer #\|)
                         ;      (string-byte-ref line2-sjis 20)))
                         ;; ログはじまりの空白を検査する
                         (_ (= (char->integer #\space)
                               (string-byte-ref line2-sjis 5)))
                         ;; ログはじまりの空白までを切り落とす
                         (line3-sjis (substring-byte line2-sjis 6 67))
                         )
                ;; Shift_JISから元に戻す
                (ces-convert line3-sjis 'sjis (gauche-character-encoding))))
            queries)
    (if (find-tail not r)
      #f ; 一個でも偽値があれば#fを返す
      r)))
(define (extract-url str)
  ;; strにurlが複数含まれていても、一つだけしか取り出さない
  ;; また、必要なら補完も行う事
  ;; TODO: あとで補完対応を行う事
  (and-let* ((m (*re:url* str)))
    (m)))

(define (dispatch-w-nl query)
  ;; - muttのコピペ
  ;; 改行後にすぐに+があるなら、それを除去して、urlとみなす
  ;; - vimircのコピペ
  ;; 対応する必要があるのは、以下のような、一行80文字までの、改行区切りの文字列
  ;; (例1:vimircのシングルモード)
  ;;  [1]irc.server-name.|01:48 <nick>: あいうえおかきくけこさしすせ htt|@nick2
  ;; *[3]#channel        |      p://www.google.com/ そたちつてとなにぬね|~
  ;; ~                   |      のはひふへほ                            |~
  ;; (例2:vimircのマルチモード)
  ;; 10:29 <nick03>: http://www.google.com/01234567890123456789012345678|nick04
  ;;       90123456789                                                  |~
  ;;
  ;; まず、行単位に分割(空行は除去)
  (let1 queries (filter
                  (lambda (x)
                    (not (string=? "" x)))
                  (string-split query  #/[\r\n]+/))
    ;; 全ての行が、上のシングルモードまたはマルチモードに完全一致
    ;; している事を確認し、発言部分のみを切り出し、そこからurlを抽出する
    (define (resolve-lines lines)
      (and-let* ((_ lines)
                 (str (apply string-append lines))
                 (url (extract-url str)))
        url))

    (cond
      ;; queriesが複数ない場合はパスする
      ((< (length queries) 2) #f)
      ;; mutt
      ((queries->lines:mutt queries) => resolve-lines)
      ;; singleを優先する必要がある(両方にマッチする可能性がある為)
      ((queries->lines:vimirc-single queries) => resolve-lines)
      ((queries->lines:vimirc-multi queries) => resolve-lines)
      (else #f))))

(define (dispatch-w-cmd cmd query query-orig)
  (and-let* ((proc (hash-table-get *cmd-proc-table* cmd #f)))
    (proc query query-orig)))

(define *re:scheme*
  ;; http:// ttp:// tp://
  ;; (match 1) => https の "s" もしくは ""
  #/^(?:http|ttp|tp)(s?)\:\/\//)
(define *re:userpass*
  ;; 空、もしくは user@ もしくは user:pass@ 
  ;; TODO: 使用可能文字種増やすべきかも
  #/^(?:(?:[\w\%\-]+(?:\:[\w\%\-]+)?\@)|)/)
(define *re:domain*
  ;; domain.name:80
  ;; localhost等、dotを含まないものについてはdomainとはみなさない事にする
  #/^[\w\-]+(?:\.[\w\-]+)+(?:\:\d+)?/)
(define *re:rest*
  ;; 空、もしくは /... もしくは /...#...
  ;; fragment部にマルチバイト文字を許容するかどうかは微妙
  ;; TODO: ↓もう少しちゃんとする事
  #/^(?:|(?:\/[\!\#\$\%\&\'\*\+\,\-\.\/0-9\:\;\=\?\@A-Z\_a-z\~\[\]\(\)]+))$/)
(define *re:url*
  #/https?\:\/\/[\!\#\$\%\&\'\*\+\,\-\.\/0-9\:\;\=\?\@A-Z\_a-z\~\[\]\(\)]+/)

(define (rewrite-uri url)
  (cond
    ((not url) #f)
    ((and
       (#/www\.amazon\.co\.jp/ url)
       (#/\/([0-9a-zA-Z]{10})(?:$|\/|\?)/ url)) =>
     (lambda (m)
       (string-append "http://www.amazon.co.jp/dp/" (m 1))))
    (else url)))

(define (dispatch-uri query)
  ;; uriとみなす為の判定に必要な部分は、以下の通り
  ;; - 文字列全体が*re:url*にマッチするなら、無条件でuri。
  ;;   しかし、そうでないなら、以下の判定を続行
  ;; - scheme部( http:// https:// ttp:// tp:// )。なくてもokだが要補完
  ;; - userpass部( user:pass@ )。なくてもok
  ;; - domain部( host.name )。必須
  ;; - rest部( /path/to/doc.html )。なくてもok
  ;; 尚、domain部以外は必須ではないが、完全にdomain部しか存在しない場合、
  ;; それはuriでない可能性が高い為、例外的にuriではない扱いとする
  (if (and-let* ((m (*re:url* query))
                 (_ (string=? "" (m 'before)))
                 (_ (string=? "" (m 'after))))
        #t)
    query ; 最初から完全なurlだったので、特に処理は不要
    (and-let* (
               ;; まず、whitespaceの除去を行う
               (query-wo-ws (regexp-replace-all #/\s/ query ""))
               ;; 各マッチを取得する(#fが出たら終了)
               (match-scheme (or
                               (*re:scheme* query-wo-ws) ; schemeあり
                               (#/^()/ query-wo-ws))) ; schemeなし
               (match-userpass (*re:userpass* (match-scheme 'after)))
               (match-domain (*re:domain* (match-userpass 'after)))
               (match-rest (*re:rest* (match-domain 'after)))
               (_ (not ; domain部しか存在しないなら、uri扱いしない
                    (and
                      (string=? "" (match-scheme))
                      (string=? "" (match-rest)))))
               (url (string-append
                      ;; scheme
                      (if (string=? "" (match-scheme))
                        "http://"
                        (string-append "http" (match-scheme 1) "://"))
                      ;; userpass
                      (match-userpass)
                      ;; domain
                      (match-domain)
                      ;; rest
                      (match-rest))))
      url)))

(define (location-url url :optional (location #f))
  ;; http://www.teria.com/~koseki/memo/referrer/
  (if location
    (cgi-header
      :pragma "no-cache"
      :cache-control "no-cache"
      :location url)
    (list
      (cgi-header
        :pragma "no-cache"
        :cache-control "no-cache"
        :refresh #`"0; URL=,url")
      (html:html
        (html:head
          (html:meta :http-equiv "Refresh"
                     :content #`"0; URL=,url"))
        (html:body
          (html:div
            (html:a :href url (html-escape-string url))))))))

(define-macro (apply-mv receiver sender)
  `(receive r ,sender
     (apply ,receiver r)))
(define-macro (apply-mv* receiver sender)
  ;; apply-mvの、senderの返り値の最初の要素が#fだったら
  ;; receiverに渡さずに#fを返すバージョン
  `(receive r ,sender
     (cond
       ((null? r) #f)
       ((not (car r)) #f)
       (else
         (apply ,receiver r)))))

(define (emit-content-solve params)
  (define (solve return)
    (let* (
           (query (cgi-get-parameter "q" params :default ""))
           ;; 空だった
           (_ (when (string=? "" query) (return (self-url) 'url/redirect)))
           ;; まず、改行が意味を持つ分岐を先に処理
           (_ (apply-mv* return (dispatch-w-nl query)))
           ;; 改行を除去する
           (query-wo-nl (regexp-replace-all #/\n|\r/ query " "))
           ;; 先頭/末尾のwhitespace(全角含む)を除去
           (query-wo-nl/trimmed (regexp-replace-all
                                  #/(^[\s　]+)|([\s　]+$)/ query-wo-nl ""))
           ;; queryの先頭にコマンド指定がされているなら、先にそれを取り出す
           ;; コマンド文字列は、1〜8文字のasciiとする
           (cmd-match (#/^([\w\%\!\@\.\:\/\*\+\-]{1,8})(?:\s+|$)/
                        query-wo-nl/trimmed))
           (cmd (and cmd-match (string-downcase (cmd-match 1))))
           (query-wo-cmd (if cmd-match
                           (cmd-match 'after)
                           query-wo-nl/trimmed))
           ;; 何かおかしい、無効化
           (_ (when (and
                      (not cmd)
                      (string=? "" query-wo-nl/trimmed))
                (return (self-url) 'url/redirect)))
           ;; コマンドを処理
           (_ (apply-mv* return (dispatch-w-cmd cmd query-wo-cmd query)))
           ;; 内容がuriっぽかったら、uriとして処理を行う
           (_ (apply-mv* return (rewrite-uri
                                  (dispatch-uri query-wo-nl/trimmed))))
           )
      ;; どれにもマッチしなかった。google検索する
      (append-params-to-url
        "http://www.google.com/search"
        `(("nfpr" "1")
          ("q" ,query-wo-nl/trimmed)))))

  (receive r (call/cc solve)
    (or
      (and-let* ((_ (< 0 (length r)))
                 (url-or-other (car r))
                 (mode-flag (if (null? (cdr r)) 'url (cadr r))))
        (case mode-flag
          ;; TODO: url系は、url-or-otherが本当に正しいurlか検証した方がいい
          ;;       (大したコストではないので)
          ((url) (location-url url-or-other))
          ((url/redirect) (location-url url-or-other #t))
          ((cgi) url-or-other)
          ((text) (list
                    (cgi-header :content-type "text/plain"
                                ;:content-type "text/plain; charset=utf-8"
                                :pragma "no-cache"
                                :cache-control "no-cache")
                    url-or-other))
          ((html) (list
                    (cgi-header :content-type "text/html"
                                ;:content-type "text/html; charset=utf-8"
                                :pragma "no-cache"
                                :cache-control "no-cache")
                    url-or-other))
          (else #f)))
      (error "assertion" r))))


(define (append-params-to-url url params)
  (if (null? params)
    url
    (receive (url-without-fragment fragment) (let1 m (#/(\#.*)/ url)
                                               (if m
                                                 (values (m 'before) (m 1))
                                                 (values url "")))
      (call-with-output-string
        (lambda (p)
          (letrec ((delimitee (if (#/\?/ url-without-fragment)
                                (lambda () "&")
                                (lambda ()
                                  (set! delimitee (lambda () "&"))
                                  "?"))))
            (display url-without-fragment p)
            (let loop ((left-params params))
              (if (null? left-params)
                (display fragment p)
                (let ((key-encoded (uri-encode-string (caar left-params)))
                      (vals (cdar left-params))
                      (next-left (cdr left-params))
                      )
                  (if (pair? vals)
                    (for-each
                      (lambda (val)
                        (display (delimitee) p) ; "?" or "&"
                        (display key-encoded p)
                        (display "=" p)
                        (display (uri-encode-string (if (string? val) val "")) p))
                      vals)
                    (begin
                      (display (delimitee) p)
                      (display key-encoded p)))
                  (loop next-left))))))))))

(define (completion-uri uri server-name server-port https)
  (receive (uri-scheme
            uri-userinfo
            uri-hostname
            uri-port
            uri-path
            uri-query
            uri-fragment) (uri-parse uri)
    ;; uri-schemeが無い時にだけ補完する
    ;; 但し、server-nameが与えられていない場合は補完できないので、何もしない
    (if (or uri-scheme (not server-name))
      uri
      (let* ((scheme (if https "https" "http"))
             (default-port (if https 443 80))
             )
        (uri-compose
          :scheme scheme
          :userinfo uri-userinfo
          :host server-name
          :port (and
                  server-port
                  (not (eqv? default-port (x->number server-port)))
                  server-port)
          :path uri-path
          :query uri-query
          :fragment uri-fragment)))))

(define (path->url path)
  (if (#/^\// path)
    (completion-uri
      path
      (cgi-get-metavariable "SERVER_NAME")
      (cgi-get-metavariable "SERVER_PORT")
      (cgi-get-metavariable "HTTPS"))
    path))

(define (self-url)
  (path->url (self-path)))

(define (self-url/path-info)
  (path->url (self-path/path-info)))

(define (self-url/slash)
  (string-append (self-url) "/"))

(define (self-path)
  (or (cgi-get-metavariable "SCRIPT_NAME") "/"))

(define (self-path/path-info)
  ;; note: PATH_INFOは既にデコードされてしまっているので使わない事
  (let* ((r (or (cgi-get-metavariable "REQUEST_URI") "/"))
         (m (#/\?/ r))
         )
    (if m
      (m 'before)
      r)))

(define (self-path/slash)
  (string-append (self-path) "/"))






;;; 以下は、個々のコマンド定義

;(define-cmd (test query . opts)
;  "this is template for new command"
;  (string-append
;    (self-url)
;    "?q=not%20implemented"))
(define (http-*-url func url . keywords)
  ;; func は http-get http-head http-delete の、どれか
  ;; (http-post http-put は今のところ未対応)
  (receive (scheme user host port path query fragment) (uri-parse url)
    (let ((server (if port
                    #`",|host|:,|port|"
                    host))
          (request-uri (if query
                         #`",|path|?,|query|"
                         path))
          )
      (apply func server request-uri keywords))))
(define-cmd (get query . opts)
  "HTTP GET"
  (or
    (and-let* ((m (*re:url* query))
               (url (m)))
      ;; TODO: 例外処理をちゃんとする
      ;; TODO: encoding対応
      (receive (status headers body) (http-*-url http-get url :no-redirect #t)
        (values
          (intersperse
            "\n\n"
            (list
              status
              (intersperse "\n" (map write-to-string headers))
              body))
          'text)))
    (string-append
      (self-url)
      "?q=invalid%20url%20"
      (uri-encode-string query))))
(define-cmd (h query . opts)
  "HTTP HEAD"
  (or
    (and-let* ((m (*re:url* query))
               (url (m)))
      ;; TODO: 例外処理をちゃんとする
      (receive (status headers body) (http-*-url http-head url :no-redirect #t)
        (values
          (intersperse
            "\n\n"
            (list
              status
              (intersperse "\n" (map write-to-string headers))
              body))
          'text)))
    (string-append
      (self-url)
      "?q=invalid%20url%20"
      (uri-encode-string query))))
;(define-cmd (s query . opts)
;  "www.synonym.com"
;  (string-append
;    "http://www.synonym.com/synonyms/"
;    ;; TODO: synonym.comでは%nnエスケープは空白以外駄目。対策した方がいい
;    (uri-encode-string query)
;    "/"))
(define-cmd (t query . opts)
  "thesaurus.com"
  (string-append
    "http://thesaurus.com/browse/"
    (uri-encode-string query)
    ""))
(define-cmd (codic query . opts)
  "codic.jp"
  (string-append
    "http://codic.jp/search?q="
    (uri-encode-string query)
    ""))
(define-cmd (e query . opts)
  "英辞郎"
  (string-append
    "http://eow.alc.co.jp/"
    (uri-encode-string query)
    "/UTF-8/"))
(define-cmd (w query . opts)
  "ja.wikipedia.org"
  (string-append
    "http://ja.wikipedia.org/wiki/"
    (uri-encode-string query)))
(define-cmd (a query . opts)
  "amazon.co.jp"
  (string-append
    "http://www.amazon.co.jp/s/?__mk_ja_JP="
    (uri-encode-string "カタカナ")
    "&url=search-alias%3Daps&field-keywords="
    (uri-encode-string query)))
(define-cmd (j query . opts)
  "jwhois.cgi"
  (string-append
    "http://sakura.tir.jp/jwhois.cgi?q="
    (uri-encode-string query)))
(define *gosh-completions-cache* #f)
(define (gosh-completions-exists? query)
  ;; NB この判定では不完全な時がある
  ;;    ( .gosh_completions には書いてあるけど、refjには書いてない項目がある)
  ;;    でも、そんな項目は、estseekで探しても、やっぱり見付からないと思うので、
  ;;    このままでいい事にする
  (unless *gosh-completions-cache*
    (set! *gosh-completions-cache* (make-hash-table 'string=?))
    (for-each
      (lambda (line)
        (hash-table-put! *gosh-completions-cache* line #t))
      (file->string-list "/home/nekoie/.gosh_completions")))
  (hash-table-get *gosh-completions-cache* query #f))
(define-cmd (g query . opts)
  "gauche-refj"
  (string-append
    (if (or
          (equal? "" query)
          (gosh-completions-exists? query))
      "http://practical-scheme.net/gauche/man/?l=jp&p="
      "http://www.callcc.net/gauche/refj/estseek.cgi?order=%40size+NUMA&phrase=")
    (uri-encode-string query)))
(define-cmd (gj query . opts)
  "google.co.jp"
  (string-append
    "http://www.google.co.jp/search?lr=lang_ja&q="
    (uri-encode-string query)))
(define-cmd (wa query . opts)
  "wolfram alpha"
  (string-append
    "http://www.wolframalpha.com/input/?i="
    (uri-encode-string query)))
(define-cmd (gi query . opts)
  "google画像検索"
  (string-append
    "http://www.google.com/search?lr=lang_ja&tbm=isch&q="
    (uri-encode-string query)))
(define-cmd (gt query . opts)
  "google翻訳"
  (string-append
    "http://translate.google.co.jp/#auto/ja/"
    (uri-encode-string query)))
(define-cmd (ha query . opts)
  "Hayoo!"
  (string-append
    "http://holumbus.fh-wedel.de/hayoo/hayoo.html?query="
    (uri-encode-string query)))
(define-cmd (ho query . opts)
  "Hoogle"
  (string-append
    "http://www.haskell.org/hoogle/?hoogle="
    (uri-encode-string query)))
(define-cmd (tr query . opts)
  "twitter-rss"
  (string-append
    ;"http://www.twitter-rss.com/user_timeline.php?screen_name="
    ;"http://www.rssitfor.me/getrss?name="
    ;"http://pipes.yahoo.com/pipes/pipe.run?_id=fe17aeb532da1aeb9dc5c0701746a6ac&_render=rss&c=1&l=ja&s=new&u="
    ;(uri-encode-string query)
    ;"https://queryfeed.net/"
    "https://queryfeed.net/tw?q="
    (uri-encode-string query)
    ))
(define-cmd (gdx query . opts)
  "libgdx api"
  (string-append
    "http://www.google.com/search?nfpr=1&q="
    "site:libgdx.badlogicgames.com/nightlies/docs/api/"
    "+"
    (uri-encode-string query)))
(define *clojure-api-url* "http://clojure.github.com/clojure/")
(define *clojure-api-table* #f)
(define (get-clojure-api-url query)
  (define (html-unescape-string html)
    ;((#\<) (display "&lt;"))
    ;((#\>) (display "&gt;"))
    ;((#\&) (display "&amp;"))
    ;((#\") (display "&quot;"))
    (regexp-replace-all
      #/\&(\w+)\;/
      html
      (lambda (m)
        (case (string->symbol (string-downcase (m 1)))
          ((lt) "<")
          ((gt) ">")
          ((amp) "&")
          ((quot) "\"")
          (else (m))))))
  (unless *clojure-api-table*
    (receive (status headers body) (http-*-url http-get
                                               *clojure-api-url*
                                               :no-redirect #t)
      (unless (equal? status "200")
        (error #`"cannot get ,*clojure-api-url*"))
      (let1 t (make-hash-table 'string=?)
        (regexp-replace-all
          #/\<a href\=\"([^"]*)\" id\=\"var\-tag\"\>([^<]*)\<\/a\>/
          body
          (lambda (m)
            (let ((href (html-unescape-string (m 1)))
                  (label (html-unescape-string (m 2))))
              (hash-table-put! t
                               (string-downcase label)
                               (string-append *clojure-api-url* href)))))
        (set! *clojure-api-table* t))))
  (hash-table-get *clojure-api-table* (string-downcase query) #f))
(define-cmd (rdc query . opts)
  "逆引きclojure"
  (string-append
    "http://www.google.com/search?nfpr=1&q="
    "site:rd.clojure-users.org/"
    "+"
    (uri-encode-string query)))
(define-cmd (clj query . opts)
  "clojure api"
  (string-append
    "http://clojuredocs.org/search?q="
    (uri-encode-string query)))
(define-cmd (grimoire query . opts)
  "clojure api"
  "http://grimoire.arrdem.com/")
(define-cmd (cclj query . opts)
  "crossclj"
  (string-append
    "http://crossclj.info/search?q="
    (uri-encode-string query)))
(define-cmd (cljs query . opts)
  "clojurescript api"
  "http://cljs.info/cheatsheet/")
(define-cmd (jman query . opts)
  "jman"
  (string-append
    "http://linuxjm.sourceforge.jp/cgi-bin/man.cgi?"
    "Pagename=" (uri-encode-string query) "&"
    "submit=Search%21&"
    "Sec1=on&"
    "Sec2=on&"
    "Sec3=on&"
    "Sec4=on&"
    "Sec5=on&"
    "Sec6=on&"
    "Sec7=on&"
    "Sec8=on"))
(define-cmd (clojars query . opts)
  "clojars"
  (string-append
    "https://clojars.org/search?q="
    (uri-encode-string query)))
(define-cmd (unity query . opts)
  "unity reference"
  (string-append
    "http://www.google.com/search?nfpr=1&q="
    "site:docs-jp.unity3d.com/Documentation/"
    "+"
    (uri-encode-string query)))
(define-cmd (boo query . opts)
  "boo wiki"
  (string-append
    "http://www.google.com/search?nfpr=1&q="
    "site:github.com/bamboo/boo/wiki"
    "+"
    (uri-encode-string query)))
(define-cmd (crafty query . opts)
  "crafty api"
  (string-append
    "http://www.google.com/search?nfpr=1&q="
    "site:craftyjs.com/api/"
    "+"
    (uri-encode-string query)))
(define-cmd (craftyjs query . opts)
  "crafty source"
  (string-append
    ;"http://www.google.com/search?nfpr=1&q="
    ;"site:github.com/craftyjs/Crafty/tree/develop/src"
    ;"site:raw.githubusercontent.com/craftyjs/Crafty/"
    ;"+"
    "https://github.com/craftyjs/Crafty/search?utf8=%E2%9C%93&q="
    (uri-encode-string query)))
(define-cmd (craftyw query . opts)
  "crafty wiki"
  (string-append
    "http://www.google.com/search?nfpr=1&q="
    "site:github.com/craftyjs/Crafty/wiki"
    "+"
    (uri-encode-string query)))
(define-cmd (pixi query . opts)
  "pixi api"
  (string-append
    "http://www.google.com/search?nfpr=1&q=site:"
    ;"www.goodboydigital.com/pixijs/docs/" ; v2
    "pixijs.github.io/docs/" ; v3
    "+"
    (uri-encode-string query)))

;(define *text-buffer-path* "/var/nekoie/data/c-a-g/buffer.dump")
;(define-cmd (ts query query-orig . opts) ; text-store
;  "バッファにテキスト保存"
;  (let1 text ((#/^ts\s+/i query-orig) 'after)
;    ;; TODO: 将来的には四桁ぐらいの文字列で鍵をかけたいところ
;    (with-output-to-file
;      *text-buffer-path*
;      (lambda ()
;        (display text)))
;    (values "done." 'text)))
;(define-cmd (tw query . opts) ; text-withdraw
;  "バッファからテキスト取り出し"
;  ;; TODO: 将来的にはtsで出力された鍵でのみ取り出せるようにする
;  (let1 text (guard (e (else "not found"))
;               (file->string *text-buffer-path*))
;    (remove-files *text-buffer-path*) ; 削除する
;    (values text 'text)))


;; POST の multipart/form-data しか受け付けないっぽい？
;(define-cmd (2 query . opts)
;  "二次元画像詳細検索"
;  (string-append
;    "http://www.ascii2d.net/imagesearch/search?uri="
;    (uri-encode-string query)))






;;;===================================================================

(select-module user)
(define main (with-module c-a-g.cgi main))

;; Local variables:
;; mode: scheme
;; end:
;; vim: set ft=scheme:
